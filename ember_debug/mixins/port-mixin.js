const Ember = window.Ember;
const { Mixin } = Ember;
export default Mixin.create({
    messages: {},
    port: {},
    portNamespace: null,
    init() {
        this._super(...arguments);
        this.setupOrRemovePortListeners('on');
    },
    willDestroy() {
        this._super(...arguments);
        this.setupOrRemovePortListeners('off');
    },
    sendMessage(name, message) {
        this.get('port').send(this.messageName(name), message);
    },
    messageName(name) {
        let messageName = name;
        if (this.get('portNamespace')) {
            messageName = `${this.get('portNamespace')}:${messageName}`;
        }
        return messageName;
    },
    /**
     * Setup or tear down port listeners. Call on `init` and `willDestroy`
     * @param {String} onOrOff 'on' or 'off' the functions to call i.e. port.on or port.off for adding or removing listeners
     */
    setupOrRemovePortListeners(onOrOff) {
        let port = this.get('port');
        let messages = this.get('messages');
        for (let name in messages) {
            if (messages.hasOwnProperty(name)) {
                port[onOrOff](this.messageName(name), this, messages[name]);
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydC1taXhpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBvcnQtbWl4aW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUMzQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDO0FBR3hCLGVBQWUsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUMxQixRQUFRLEVBQUUsRUFBUztJQUVuQixJQUFJLEVBQUUsRUFBVTtJQUVoQixhQUFhLEVBQUUsSUFBcUI7SUFFcEMsSUFBSTtRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUUxQixJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFFMUIsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBWSxFQUFFLE9BQVk7UUFDcEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQVk7UUFDdEIsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUM3QixXQUFXLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLFdBQVcsRUFBRSxDQUFDO1NBQzdEO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNILDBCQUEwQixDQUFDLE9BQXFCO1FBQzlDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwQyxLQUFLLElBQUksSUFBSSxJQUFJLFFBQVEsRUFBRTtZQUN6QixJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUM3RDtTQUNGO0lBQ0gsQ0FBQztDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQb3J0IGZyb20gXCJlbWJlci1kZWJ1Zy9wb3J0XCI7XG5cbmNvbnN0IEVtYmVyID0gd2luZG93LkVtYmVyO1xuY29uc3QgeyBNaXhpbiB9ID0gRW1iZXI7XG5cblxuZXhwb3J0IGRlZmF1bHQgTWl4aW4uY3JlYXRlKHtcbiAgbWVzc2FnZXM6IHt9IGFzIGFueSxcblxuICBwb3J0OiB7fSBhcyBQb3J0LFxuXG4gIHBvcnROYW1lc3BhY2U6IG51bGwgYXMgc3RyaW5nIHwgbnVsbCxcblxuICBpbml0KCkge1xuICAgIHRoaXMuX3N1cGVyKC4uLmFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnNldHVwT3JSZW1vdmVQb3J0TGlzdGVuZXJzKCdvbicpO1xuICB9LFxuXG4gIHdpbGxEZXN0cm95KCkge1xuICAgIHRoaXMuX3N1cGVyKC4uLmFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnNldHVwT3JSZW1vdmVQb3J0TGlzdGVuZXJzKCdvZmYnKTtcbiAgfSxcblxuICBzZW5kTWVzc2FnZShuYW1lOiBzdHJpbmcsIG1lc3NhZ2U6IGFueSkge1xuICAgIHRoaXMuZ2V0KCdwb3J0Jykuc2VuZCh0aGlzLm1lc3NhZ2VOYW1lKG5hbWUpLCBtZXNzYWdlKTtcbiAgfSxcblxuICBtZXNzYWdlTmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICBsZXQgbWVzc2FnZU5hbWUgPSBuYW1lO1xuICAgIGlmICh0aGlzLmdldCgncG9ydE5hbWVzcGFjZScpKSB7XG4gICAgICBtZXNzYWdlTmFtZSA9IGAke3RoaXMuZ2V0KCdwb3J0TmFtZXNwYWNlJyl9OiR7bWVzc2FnZU5hbWV9YDtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VOYW1lO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXR1cCBvciB0ZWFyIGRvd24gcG9ydCBsaXN0ZW5lcnMuIENhbGwgb24gYGluaXRgIGFuZCBgd2lsbERlc3Ryb3lgXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvbk9yT2ZmICdvbicgb3IgJ29mZicgdGhlIGZ1bmN0aW9ucyB0byBjYWxsIGkuZS4gcG9ydC5vbiBvciBwb3J0Lm9mZiBmb3IgYWRkaW5nIG9yIHJlbW92aW5nIGxpc3RlbmVyc1xuICAgKi9cbiAgc2V0dXBPclJlbW92ZVBvcnRMaXN0ZW5lcnMob25Pck9mZjogJ29uJyB8ICdvZmYnKSB7XG4gICAgbGV0IHBvcnQgPSB0aGlzLmdldCgncG9ydCcpO1xuICAgIGxldCBtZXNzYWdlcyA9IHRoaXMuZ2V0KCdtZXNzYWdlcycpO1xuXG4gICAgZm9yIChsZXQgbmFtZSBpbiBtZXNzYWdlcykge1xuICAgICAgaWYgKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHBvcnRbb25Pck9mZl0odGhpcy5tZXNzYWdlTmFtZShuYW1lKSwgdGhpcywgbWVzc2FnZXNbbmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG4iXX0=